name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Triggers on version tags like 1.0.0, 2.1.3, etc.

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      release-date: ${{ steps.get_date.outputs.DATE }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
      
      - name: Get release date
        id: get_date
        run: |
          RELEASE_DATE=$(date -u +%Y-%m-%d)
          echo "DATE=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "Release date: $RELEASE_DATE"
      
      - name: Update resume files with version and date
        run: |
          node scripts/update-version.js ${{ steps.get_version.outputs.VERSION }} ${{ steps.get_date.outputs.DATE }}
          echo "Updated resume files with version ${{ steps.get_version.outputs.VERSION }} and date ${{ steps.get_date.outputs.DATE }}"
      
      - name: Build PDFs
        run: |
          npm run build:pdf
          echo "PDFs built successfully!"
          ls -lh pdf/
          echo "Verifying PDF files exist:"
          test -f pdf/resume.eng.pdf && echo "✓ English PDF exists" || echo "✗ English PDF missing"
          test -f pdf/resume.rus.pdf && echo "✓ Russian PDF exists" || echo "✗ Russian PDF missing"
      
      - name: Commit updated resume files
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add resume/*.json
          git diff --staged --quiet || git commit -m "chore: update resume versions to ${{ steps.get_version.outputs.VERSION }}"
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            pdf/resume.eng.pdf
            pdf/resume.rus.pdf
            resume/*.json
          body: |
            Release ${{ steps.get_version.outputs.VERSION }}
            
            ## Resume Files
            - 📄 English PDF: `resume.eng.pdf`
            - 📄 Russian PDF: `resume.rus.pdf`
            - 📋 English JSON: `eng.json`
            - 📋 Russian JSON: `rus.json`
            
            All resume files have been updated with version ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify PDFs before Docker build
        run: |
          echo "Checking PDF files before Docker build..."
          ls -lh pdf/
          echo "PDF files verified!"
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Don't use cache for COPY instructions to ensure fresh PDFs
          no-cache: false
      
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: release
    if: success() && needs.release.result == 'success'
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
      - name: Setup Kubernetes cluster access
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          if [ -n "$KUBE_CONFIG" ]; then
            mkdir -p ~/.kube
            echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
            chmod 600 ~/.kube/config
            echo "KUBE_ACCESS=true" >> $GITHUB_ENV
          else
            echo "KUBE_ACCESS=false" >> $GITHUB_ENV
          fi
          
      - name: Deploy to Kubernetes with Helm
        if: env.KUBE_ACCESS == 'true'
        run: |
          helm upgrade --install cv ./helm/cv \
            --namespace cv \
            --create-namespace \
            --set image.tag="${{ needs.release.outputs.version }}" \
            --wait \
            --timeout 3m \
            --debug
          
      - name: Create deployment summary
        if: always()
        run: |
          echo "🎉 **Release ${{ needs.release.outputs.version }} Complete!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Date:** ${{ needs.release.outputs.release-date }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Tasks" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Extracted version from tag" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Updated resume JSON files with version and date" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Built PDF files for all languages" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Built and pushed Docker image" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Created GitHub Release with artifacts" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.KUBE_ACCESS }}" == "true" ]; then
            echo "- [x] Deployed to Kubernetes cluster successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "- [ ] Kubernetes deployment (cluster access not configured)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📄 Resume Files" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 English PDF: \`resume.eng.pdf\`" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 Russian PDF: \`resume.rus.pdf\`" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 English JSON: \`eng.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Russian JSON: \`rus.json\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.KUBE_ACCESS }}" == "true" ]; then
            echo "### 🚀 Live Application" >> $GITHUB_STEP_SUMMARY
            echo "**CV version ${{ needs.release.outputs.version }} is now live!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 **English CV:** [https://cv.boysthings.top/](https://cv.boysthings.top/)" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 **Russian CV:** [https://cv.boysthings.top/rus](https://cv.boysthings.top/rus)" >> $GITHUB_STEP_SUMMARY
            echo "- 📄 **PDF Files:** [https://cv.boysthings.top/pdf](https://cv.boysthings.top/pdf)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "Resume files have been uploaded to the [GitHub Release](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note:** Kubernetes deployment was skipped (KUBE_CONFIG secret not configured)" >> $GITHUB_STEP_SUMMARY
          fi
