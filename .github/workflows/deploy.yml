name: Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Docker image version to deploy (e.g., 0.0.3 or latest)'
        required: true
        default: 'latest'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      namespace:
        description: 'Kubernetes namespace'
        required: true
        default: 'cv'
      dry_run:
        description: 'Perform a dry run (template only, no apply)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          # Add your kubeconfig here
          # Option 1: Use GitHub Secrets
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Verify connection
          kubectl cluster-info
          kubectl get nodes

      - name: Verify Helm chart
        run: |
          helm lint ./helm/cv
          echo "‚úÖ Helm chart is valid"

      - name: Dry run (template)
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "üîç Performing dry run..."
          helm template cv ./helm/cv \
            --namespace ${{ github.event.inputs.namespace }} \
            --set image.tag=${{ github.event.inputs.version }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Deploy with Helm
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          echo "üöÄ Deploying version ${{ github.event.inputs.version }} to ${{ github.event.inputs.environment }}..."
          
          helm upgrade --install cv ./helm/cv \
            --namespace ${{ github.event.inputs.namespace }} \
            --create-namespace \
            --set image.tag=${{ github.event.inputs.version }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --wait \
            --timeout 5m \
            --debug
          
          echo "‚úÖ Deployment completed successfully!"

      - name: Verify deployment
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          echo "üîç Verifying deployment..."
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod \
            -l app.kubernetes.io/name=cv \
            -n ${{ github.event.inputs.namespace }} \
            --timeout=300s
          
          # Show deployment status
          echo ""
          echo "üìä Deployment Status:"
          kubectl get pods -n ${{ github.event.inputs.namespace }} -l app.kubernetes.io/name=cv
          kubectl get svc -n ${{ github.event.inputs.namespace }} -l app.kubernetes.io/name=cv
          kubectl get ingress -n ${{ github.event.inputs.namespace }}
          
          echo ""
          echo "‚úÖ All pods are ready!"

      - name: Get application URLs
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          echo "üåê Application URLs:"
          echo "- English CV: https://cv.boysthings.top/eng"
          echo "- Russian CV: https://cv.boysthings.top/rus"
          echo "- PDF Server: https://cv.boysthings.top/pdf"

      - name: Deployment Summary
        if: always()
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ github.event.inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ github.event.inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: \`${{ github.event.inputs.namespace }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: \`${{ github.event.inputs.dry_run }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Application URLs" >> $GITHUB_STEP_SUMMARY
          echo "- English CV: https://cv.boysthings.top/eng" >> $GITHUB_STEP_SUMMARY
          echo "- Russian CV: https://cv.boysthings.top/rus" >> $GITHUB_STEP_SUMMARY
          echo "- PDF Server: https://cv.boysthings.top/pdf" >> $GITHUB_STEP_SUMMARY

  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && github.event.inputs.dry_run == 'false'
    
    steps:
      - name: Rollback deployment
        run: |
          echo "‚ö†Ô∏è Deployment failed, rolling back..."
          helm rollback cv -n ${{ github.event.inputs.namespace }}
          echo "‚úÖ Rollback completed"

